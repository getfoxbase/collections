{"version":3,"sources":["../../src/CollectionTypes/Documents.js"],"names":["Documents","Collection","constructor","name","configuration","formatIn","input","ret","key","field","fields","entries","value","default","isArray","Array","filter","a","newVal","val","type","push","nullable","Error","formatOut","doc","id","driver","getPrimaryKey"],"mappings":"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","sourcesContent":["import Collection from '../Collection'\r\n\r\nexport default class Documents extends Collection {\r\n    constructor(name, configuration) {\r\n        super(name, configuration)\r\n    }\r\n\r\n    async formatIn(input) {\r\n        let ret = {}\r\n\r\n        for (const [key, field] of (this.fields ?? {}).entries()) {\r\n            let value = input[key] ?? field.default ?? null\r\n\r\n            if (field.isArray && value instanceof Array === false) {\r\n                value = [value].filter(a => a !== null)\r\n            }\r\n\r\n            if (field.isArray) {\r\n                let newVal = []\r\n                for (let val of value) {\r\n                    val = await field.type.formatIn(val, field)\r\n                    if (val !== null)\r\n                        newVal.push(val)\r\n                }\r\n                value = newVal\r\n            } else {\r\n                value = await field.type.formatIn(value, field)\r\n\r\n                if (value === null && !field.nullable) {\r\n                    throw new Error(`Missing value for \"${key}\" in the \"${this.name}\" collection.`)\r\n                }\r\n            }\r\n\r\n            ret[key] = value\r\n        }\r\n\r\n        return ret\r\n    }\r\n\r\n    async formatOut(doc) {\r\n        let ret = {\r\n            id: this.driver.getPrimaryKey(doc),\r\n        }\r\n\r\n        for (const [key, field] of (this.fields ?? {}).entries()) {\r\n            let value = doc[key] ?? null\r\n\r\n            if (field.isArray && value instanceof Array === false) {\r\n                value = [value].filter(a => a !== null)\r\n            }\r\n\r\n            if (field.isArray) {\r\n                let newVal = []\r\n                for (let val of value) {\r\n                    val = await field.type.formatOut(val, field)\r\n                    if (val !== null)\r\n                        newVal.push(val)\r\n                }\r\n                value = newVal\r\n            } else {\r\n                value = await field.type.formatOut(value, field)\r\n            }\r\n\r\n            ret[key] = value\r\n        }\r\n\r\n        return ret\r\n    }\r\n}"],"file":"Documents.js"}