{"version":3,"sources":["../src/Model.js"],"names":["Model","constructor","collectionName","data","driver","id","getCollection","Collection","get","key","defaultValue","Dot","set","value","setMany","o","matches","query","save","collection","getPrimaryKeyName","formatPrimaryKey","ret","update","formatIn","insert","getPrimaryKey","addToCache","delete","removeFromCache"],"mappings":"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","sourcesContent":["import sift from 'sift'\r\nimport Dot from './Tools/Dot'\r\nimport Collection from \"./Collection\"\r\n\r\nexport default class Model {\r\n    constructor(collectionName, data, driver) {\r\n        this.driver = driver\r\n        this.collectionName = collectionName\r\n        this.data = data\r\n        this.id = data.id ?? null\r\n    }\r\n\r\n    getCollection() {\r\n        return Collection.get(this.collectionName)\r\n    }\r\n\r\n    get(key, defaultValue = null) {\r\n        return Dot.get(this.data, key) ?? defaultValue\r\n    }\r\n\r\n    set(key, value) {\r\n        Dot.set(this.data, key, value)\r\n        return this\r\n    }\r\n\r\n    setMany(o) {\r\n        for (let key in o)\r\n            Dot.set(this.data, key, o[key])\r\n        return this\r\n    }\r\n\r\n    matches(query = {}) {\r\n        return sift(query)(this.data)\r\n    }\r\n\r\n    async save() {\r\n        const collection = Collection.get(this.collectionName)\r\n\r\n        if (this.id !== null) { // Update\r\n            const query = {}\r\n            query[this.driver.getPrimaryKeyName()] = this.driver.formatPrimaryKey(this.id)\r\n            const ret = await this.driver.update(\r\n                this.collectionName,\r\n                query,\r\n                await collection.formatIn(this.data)\r\n            )\r\n        } else { // Insert\r\n            const ret = await this.driver.insert(\r\n                this.collectionName,\r\n                await collection.formatIn(this.data)\r\n            )\r\n            this.id = this.driver.getPrimaryKey(ret)\r\n            this.data.id = this.id\r\n\r\n            collection.addToCache(this)\r\n        }\r\n        \r\n        return true\r\n    }\r\n\r\n    async delete() {\r\n        if (this.id === null)\r\n            return false\r\n        \r\n        const query = {}\r\n        query[this.driver.getPrimaryKeyName()] = this.driver.formatPrimaryKey(this.id)\r\n\r\n        const collection = this.getCollection()\r\n        const ret = await this.driver.delete(\r\n            this.collectionName,\r\n            query\r\n        )\r\n\r\n        collection.removeFromCache(this.id)\r\n        \r\n        this.id = null\r\n        return ret\r\n    }\r\n}"],"file":"Model.js"}